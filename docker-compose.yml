version: '3.8'

networks:
  app_network:
    driver: bridge

volumes:
  neo4j_data:
  shared_python_packages:  # Shared volume for Python dependencies

services:
  neo4j:
    image: neo4j:5.13
    container_name: neo4j
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}  # âœ… Uses env vars
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "MATCH (n) RETURN COUNT(n);"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-container
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_NODE_PORT: 5672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 30s
      retries: 3
    restart: always
    networks:
      - app_network

  dataprocess:
    build: ./src/dataprocess
    depends_on:
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "8001:8001"
    command: uvicorn dataprocess_server:app --host 0.0.0.0 --port 8001
    volumes:
      - shared_python_packages:/usr/local/lib/python3.10/site-packages  # Shared dependencies
    restart: always
    networks:
      - app_network

  model-service:
    build: ./src/modelserver
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8002:8002"
    command: uvicorn model_server:app --host 0.0.0.0 --port 8002
    volumes:
      - shared_python_packages:/usr/local/lib/python3.10/site-packages  # Shared dependencies
    restart: always
    networks:
      - app_network

  xai-service:
    build: ./src/xaiserver
    depends_on:
      rabbitmq:
        condition: service_healthy
      model-service:
        condition: service_healthy
    ports:
      - "8003:8003"
    command: uvicorn xai_server:app --host 0.0.0.0 --port 8003
    volumes:
      - shared_python_packages:/usr/local/lib/python3.10/site-packages  # Shared dependencies
    restart: always
    networks:
      - app_network

  center-service:
    build: ./src
    depends_on:
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      xai-service:
        condition: service_healthy
    ports:
      - "8880:8880"
    command: uvicorn center_server:app --host 0.0.0.0 --port 8880
    volumes:
      - shared_python_packages:/usr/local/lib/python3.10/site-packages  # Shared dependencies
    restart: always
    networks:
      - app_network

  kong:
    image: kong:latest
    container_name: api-gateway
    build:
      context: ./src/api_gateway
      dockerfile: Dockerfile
      args: 
        - P_VALUE=${P_VALUE}
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - P_VALUE=${P_VALUE}
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      center-service:
        condition: service_healthy
      dataprocess:
        condition: service_healthy
    restart: always
    networks:
      - app_network

  konga: 
    container_name: api-gateway-ui
    image: pantsel/konga:latest
    environment:
      - NODE_ENV=production
    ports:
      - "1337:1337"
    restart: always
    networks:
      - app_network
